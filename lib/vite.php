<?php

class WPVite {
	public string $distUri;
	public string $distPath;
	public string $wpEnqueueId;
	public string $server;
	public string $entryPoint;
	public bool $viteIsRunning;
	public array $jsDeps = [];
	public function __construct($isChild) {
		$dir = $isChild ? get_stylesheet_directory() : get_template_directory();
		$dirUri = $isChild ? get_stylesheet_directory_uri() : get_template_directory_uri();
		$env = parse_ini_file($dir . '/.env');
		$this->distUri = $dirUri . '/' . $env['VITE_OUTPUT_DIR'];
		$this->distPath = $dir . '/' . $env['VITE_OUTPUT_DIR'];
		$this->wpEnqueueId = $env['WP_ENQUEUE_ID'];
		$this->server = $env['VITE_PROTOCOL'] . '://' . $env['VITE_HOST'] . ':' . $env['VITE_PORT'];
		$this->entryPoint = $env['VITE_ENTRY_POINT'];
		$this->viteIsRunning = $env['WP_ENVIRONMENT'] == 'production' ? false : $this->checkServer();
		$this->init();
	}

	public function init() {
		$viteIsRunning = $this->viteIsRunning;
		add_action('wp_enqueue_scripts', function () use ($viteIsRunning) {
			if ($viteIsRunning === true) {
				$this->viteDevAssets();
			} else {
				$this->viteBuiltAssets();
			}
		});
	}


	/**
	 * Checks the availability of a the vite server by sending a HEAD request.
	 *
	 * @return bool Returns true if the server is reachable and responds with a 200 status code,
	 *              otherwise returns false.
	 */
	public function checkServer(): bool {
		$ch = curl_init($this->server . '/' . $this->entryPoint);
		curl_setopt($ch, CURLOPT_HEADER, true);    // Include headers in the response
		curl_setopt($ch, CURLOPT_NOBODY, true);    // Use HEAD method to reduce data transfer
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); // Return the response as a string
		curl_setopt($ch, CURLOPT_TIMEOUT, 10);     // Set a timeout for the request
		$output = curl_exec($ch);
		$httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
		curl_close($ch);

		// Check if the HTTP status code is 200 (OK)
		if ($httpcode == 200) {
			return true;
		} else {
			return false;
		}
	}


	/**
	 * Retrieves a list of CSS and JavaScript assets from vite's manifest file.
	 *
	 * This method reads the manifest file located at the specified distPath and extracts
	 * the list of CSS and JavaScript assets associated with the entryPoint. The manifest
	 * file should be in JSON format.
	 *
	 * @return array An associative array containing two keys:
	 *               - 'css' (array): An array of CSS asset paths.
	 *               - 'js' (array): An array of JavaScript asset paths.
	 *               If the manifest file or specific assets are not found, empty arrays are returned.
	 */
	public function getProductionAssets() {
		$manifest = json_decode(file_get_contents($this->distPath . '/.vite/manifest.json'), true);
		$filelist = [
			'css' => [],
			'js' => [],
		];

		if (is_array($manifest)) {
			if (isset($manifest[$this->entryPoint])) {
				$files = $manifest[$this->entryPoint];
				if (isset($files['css'])) {
					$filelist['css'] = $files['css'];
				}
				if (isset($files['file'])) {
					$filelist['js'][] = $files['file'];
				}
			}
		}
		return $filelist;
	}

	/**
	 * Enable Vite development mode by adding a Vite script to the WordPress site's head.
	 *
	 * This method injects a Vite development script into the WordPress site's head section.
	 * The script is loaded using the provided 'server' and 'entryPoint' parameters, allowing
	 * Vite to serve development assets during development mode.
	 *
	 * @note Make sure to call this method within a WordPress context.
	 *
	 * @return void
	 */
	public function viteDevAssets() {
		$src = $this->server . '/' . $this->entryPoint;
		add_action('wp_head', function () use ($src) {
			echo '<script id="vite" type="module" crossorigin src="' . $src . '"></script>';
		});
	}

	/**
	 * Enqueue Vite-built CSS and JavaScript assets in a WordPress theme or plugin.
	 *
	 * This method enqueues CSS and JavaScript assets generated by Vite for production mode.
	 * It retrieves the asset list using the 'getProductionAssets()' method and enqueues them
	 * using WordPress functions 'wp_enqueue_style()' and 'wp_enqueue_script()'.
	 *
	 * @note Make sure to call this method within a WordPress theme or plugin context.
	 *
	 * @return void
	 */
	public function viteBuiltAssets() {
		$filelist = $this->getProductionAssets();
		$i = 0;
		foreach ($filelist['css'] as $file) {
			$i++;
			wp_enqueue_style($this->wpEnqueueId . '-style-' . $i, $this->distUri . '/' . $file);
		}

		$i = 0;
		foreach ($filelist['js'] as $file) {
			$i++;
			wp_enqueue_script($this->wpEnqueueId . '-script-' . $i, $this->distUri . '/' . $file, $this->jsDeps, '', true);
		}
	}
}
